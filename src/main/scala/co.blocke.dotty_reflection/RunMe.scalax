package co.blocke.dotty_reflection

// import impl._ 
import info._

object Size2 extends Enumeration {
  val Small, Medium, Large = Value
}
object SizeWithType2 extends Enumeration {
  type SizeWithType2 = Value
  val Little, Grand = Value
}
import SizeWithType2._
case class SampleEnum2(
    e1: Size2.Value,
    e2: Size2.Value,
    e3: Size2.Value,
    e4: Size2.Value,
    e5: Size2.Value,
    e6: SizeWithType2)

enum Color2 {
    case Red, Blue, Green
}
case class TVColors2( color1: Color2, color2: Color2 )


object RunMe extends App:

  val r = Reflector.reflectOn[TVColors2]
  val e = r.asInstanceOf[ScalaCaseClassInfo].fields(1).asInstanceOf[ScalaFieldInfo].fieldType.asInstanceOf[ScalaEnumInfo]
  println("E: "+e)
  val sample1 = e.valueOf("Blue")
  val z = TVColors2(Color2.Red,Color2.Blue)
  val sample2 = e.valueOf("Blue")

  println(sample1 == z.color2)

  println("done.")
